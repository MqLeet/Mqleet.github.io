[{"categories":null,"content":"如何利用hugo建立主题为LoveIt的个人博客 个人主机： 操作系统：Windows 10 git版本：git version 2.37.1.windows.1 1 下载hugo 在hugo的release界面选择合适的版本进行下载https://github.com/gohugoio/hugo/releases 建议下载hugo_extended_0.x.x_Windows-64bit.zip，原因后面会说 此处我们先下载hugo_0.101.0_Windows-64bit.zip,下载步骤如下： 下载hugo_0.101.0_Windows-64bit.zip到桌面，解压到D:\\blog\\bin 设置环境变量PATH，将D:\\blog\\bin加入环境变量PATH 打开cmd,输入hugo version,即可查看安装好的hugo的版本 git version查看安装的git的版本 至此，hugo的下载完成。 2 安装 ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:0:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"2.1 创建我们自己的项目 打开cmd 输入如下命令 hugo new site my_website cd my_website 这里的my_website就是我们用hugo的new命令新建的项目（网站）文件夹 此时我们进入了项目文件夹my_website ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:1:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"2.2 安装主题 这里我选择的是LoveIt主题，他的仓库是：https://github.com/dillonzq/LoveIt 我们下载主题的最新版本.zip文件到桌面，然后解压到创建的/my_website/themes/文件夹中,注意将解压后的LoveIt-0.2.xx文件夹更名为LoveIt，方便配置文件的查询 ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:2:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"2.3 基础配置 参考https://hugoloveit.com/zh-cn/theme-documentation-basics/#basic-configuration ，将/my_website下的config.toml的内容替换为上面网址中对应的内容，保存文件。 运行命令 hugo serve 访问http://localhost:1313/ ，可以观察在本地启动的博客网站 ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:3:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"2.4 创建文章 hugo new posts/first_post.md 可以在/my_website/content/posts中找到first_post.md 此时运行 hugo serve --buildDrafts 即可查看含有第一篇文章的页面 3 套用更完善的配置文件 利用 https://hugoloveit.com/zh-cn/theme-documentation-basics/#3-%E9%85%8D%E7%BD%AE 提供的toml文件。 修改enableGitInfo为false，修改name = \"Qianli's blog\"使左上角的导航出现 运行 hugo serve --buildDrafts 得到完整的启动在本地的网站 4 将本地网站挂载到github-pages上 经历了如上三步，我们只能在本地启动个人博客网站，这样让人很不爽，那么我们该怎么让别人也能看到我们的博客网站呢？ 我们可以将本地博客部署到github-pages上 ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:4:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"4.1 创建存储静态页面的仓库 在github中新建一个repo，repo的名字是github用户名.github.io ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:5:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"4.2 使用hugo命令生成包含网站资源的public目录 运行 hugo --baseUrl=\"https://Mqleet.github.io/\" --buildDrafts 然后 cd public 初始化 git init 将所有资源加入index git add . 提交 git commit -m \"first commit\" 增加远程定义 git remote add origin https://github.com/MqLeet/Mqleet.github.io.git // 这里之前用ssh增加远程定义失败了，所以改用https来远程连接 第一次push需要加-u origin master，后面再提交可以直接push git push -u origin master 然后github授权，即可将本地仓库push到github去。 此时，在浏览器中即可使用github用户名.github.io访问挂载在github-pages上的个人博客啦！ ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:6:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"4.3 在4.2中可能会遇到如下报错 error: failed to transform resource: TOCSS: failed to transform \"scss/main.scss\" (text/x-scss): this feature is not available in your current Hugo version 参考官方文档https://gohugo.io/troubleshooting/faq/#i-get-this-feature-is-not-available-in-your-current-hugo-version 的解决方案：下载带有extended版本的hugo即可解决 至此，1处的伏笔也已收回 5 写完文章后如何上传： 在my_website文件执行命令行指令： hugo --baseUrl=\"https://Mqleet.github.io/\" --buildDrafts 生成public文件 然后打开需要提交的文件public cd public 对public文件执行 git add . git commit -m \"first commit\" 其中\"first commit\"是本次提交的名字，可以重复使用 git push 将缓冲区的内容push到仓库去 如果遇到如下报错： fatal: unable to access 'https://github.com/MqLeet/Mqleet.github.io.git/': OpenSSL SSL_read: Connection was aborted, errno 10053 原因：Git默认限制推送的大小，运行命令更改限制大小即可 解决方法：git config --global http.postBuffer 524288000 结语： 至此，我们由原始配置得到了一个比较粗糙的网站，想得到更精致的个人博客网站，可以参考https://hugoloveit.com/zh-cn/ 的文章，修改配置文件中的参数来设置~ ","date":"2022-08-19","objectID":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/:7:0","tags":null,"title":"利用hugo建站","uri":"/%E5%88%A9%E7%94%A8hugo%E5%BB%BA%E7%AB%99/"},{"categories":null,"content":"使用Python生成GIF图片和MP4视频 ","date":"2022-08-19","objectID":"/img2video/:0:0","tags":null,"title":"Img2video","uri":"/img2video/"},{"categories":null,"content":"GIF图像的制作 from glob import glob import imageio def make_gif(img_folder): \"\"\" Make a gif image for giving image folder \"\"\" images = [] image_list = glob(os.path.join(img_folder, \"*.png\")) for img_path in image_list: images.append(imageio.imread(img_path)) imageio.mimsave('save_dir/image.gif', images, fps=30) ","date":"2022-08-19","objectID":"/img2video/:1:0","tags":null,"title":"Img2video","uri":"/img2video/"},{"categories":null,"content":"MP4视频的制作 import cv2 from glob import glob def make_video(path): fps = 30 # 视频帧率 size = (800, 1600) # 需要转为视频的图片的尺寸 # size = (1600, 800) # 需要转为视频的图片的尺寸 # video = cv2.VideoWriter(r\"F:\\Writing\\PHD\\condiate\\output_yolov5s.avi\", cv2.VideoWriter_fourcc('I', '4', '2', '0'), fps, size) video = cv2.VideoWriter(r\"F:\\Writing\\PHD\\AAAI2022\\composed_vertical.mp4\", cv2.VideoWriter_fourcc(*\"mp4v\"), fps, size) # 创建视频流对象-格式一 image_list = glob(os.path.join(img_folder, \"*.png\")) for img_path in image_list: image = cv2.imread(img_path) # 注意image的尺寸与size的尺寸是相反的，比如size是(800, 1600)，那么image的尺寸就应该是（1600，800） video.write(image) video.release() cv2.destroyAllWindows() ","date":"2022-08-19","objectID":"/img2video/:2:0","tags":null,"title":"Img2video","uri":"/img2video/"}]